{"componentChunkName":"component---src-templates-blog-post-js","path":"/axios-interceptor/","result":{"data":{"site":{"siteMetadata":{"title":"Gatsby Blog"}},"markdownRemark":{"id":"7504e83f-474d-5aac-95c7-7212bbb758c7","excerpt":"在 Axios 中拦截器是非常有用的一个功能，可以让我们实现请求前对 config 参数进行调整以及响应后的数据处理。\n由于可以添加多个请求或响应拦截器，所以很明显 Axios 的拦截器内部是一个数组，通过 use 方法进行添加拦截器，通过 eject…","html":"<p>在 Axios 中拦截器是非常有用的一个功能，可以让我们实现请求前对 config 参数进行调整以及响应后的数据处理。\n由于可以添加多个请求或响应拦截器，所以很明显 Axios 的拦截器内部是一个数组，通过 use 方法进行添加拦截器，通过 eject 方法删除某个拦截器。</p>\n<p>所以先实现拦截器管理类的第一步</p>\n<ul>\n<li>存在一个内部变量维护拦截器的添加和删除</li>\n<li>通过 use 方法添加拦截器，并返回此拦截器在数组中的位置方便删除操作</li>\n<li>通过 eject 方法删除某个拦截器</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">InterceptorManager</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>interceptors <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolved<span class=\"token punctuation\">,</span> rejected</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 拦截器包含resolved和rejected两个函数</span>\n    <span class=\"token keyword\">let</span> interceptor <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      resolved<span class=\"token punctuation\">,</span>\n      rejected\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>interceptor<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">eject</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">id</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span> <span class=\"token comment\">// 不改变数组长度，把对应拦截器设为null</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>通过以上拦截器的实现，那么一个简易的 Axios 类就很简单了</p>\n<ul>\n<li>创建两个实例对应请求拦截器和响应拦截器</li>\n<li>添加一个 request 方法模拟 xhr 请求，入参为 config，返回值为 response</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Axios</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>interceptors <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      request<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InterceptorManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      response<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InterceptorManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">config</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//拦截器的使用</span>\n<span class=\"token keyword\">const</span> axios <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\naxios<span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">config</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  config<span class=\"token punctuation\">.</span>header<span class=\"token punctuation\">.</span>Token <span class=\"token operator\">=</span> <span class=\"token string\">'string'</span>\n  <span class=\"token keyword\">return</span> config\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>axios<span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// InterceptorManager {</span>\n<span class=\"token comment\">//   interceptors: [ { resolved: [Function (anonymous)], rejected: undefined } ]</span>\n<span class=\"token comment\">// }</span></code></pre></div>\n<p>这样通过调用 use 方法的调用就可以把自定义的拦截器函数推入相应的拦截器数组里，但是存进数组里的方法暂时还不能够调用，那么再对 InterceptorManager 类提供一个 forEach 的方法供外部调用，具体实现为：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">InterceptorManager</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>interceptors <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolved<span class=\"token punctuation\">,</span> rejected</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 拦截器包含resolved和rejected两个函数</span>\n    <span class=\"token keyword\">let</span> interceptor <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      resolved<span class=\"token punctuation\">,</span>\n      rejected\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>interceptor<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">eject</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">id</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span> <span class=\"token comment\">// 不改变数组长度，把对应拦截器设为null</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">interceptor</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>interceptor <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>interceptor<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>剩下的工作就是在 Axios 创建实例的时候把请求拦截器加在 xhr 请求之前，把响应拦截器放在获取数据之后，而且整个步骤是按顺序链式调用的。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Axios</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>interceptors <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      request<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InterceptorManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      response<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InterceptorManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// 模拟一个xhr请求，log此时的config，返回带有response的Promise对象</span>\n  <span class=\"token function\">xhr</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">config</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span>  Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>code<span class=\"token operator\">:</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span>data<span class=\"token operator\">:</span><span class=\"token string\">'test'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">config</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//创建一个新数据组按顺序存放拦截器和请求方法</span>\n   <span class=\"token keyword\">const</span> chain <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        resolved<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>xhr<span class=\"token punctuation\">,</span>\n        rejected<span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n    <span class=\"token comment\">//请求拦截器放在请求调用之前</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">interceptor</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      chain<span class=\"token punctuation\">.</span><span class=\"token function\">unshift</span><span class=\"token punctuation\">(</span>interceptor<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">//响应拦截器放在请求调用之后</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">interceptor</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      chain<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>interceptor<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">let</span> promise <span class=\"token operator\">=</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>chain<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> resolved<span class=\"token punctuation\">,</span> rejected <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> chain<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      promise <span class=\"token operator\">=</span> promise<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>resolved<span class=\"token punctuation\">,</span> rejected<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> promise\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这样整个Axios的拦截器功能就实现了，通过对chain数组的遍历完成链式调用，而且在执行到xhr请求时把参数从config换成了response，这样响应拦截器的参数就变成了response。</p>\n<p>完整代码如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">InterceptorManager</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>interceptors <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolved<span class=\"token punctuation\">,</span> rejected</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 拦截器包含resolved和rejected两个函数</span>\n    <span class=\"token keyword\">let</span> interceptor <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      resolved<span class=\"token punctuation\">,</span>\n      rejected\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>interceptor<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">eject</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">id</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span> <span class=\"token comment\">// 不改变数组长度，把对应拦截器设为null</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">interceptor</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>interceptor <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>interceptor<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Axios</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>interceptors <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      request<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InterceptorManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      response<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InterceptorManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">xhr</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">config</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> code<span class=\"token operator\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> data<span class=\"token operator\">:</span> <span class=\"token string\">'test'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">config</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//创建一个新数据组按顺序存放拦截器和请求方法</span>\n    <span class=\"token keyword\">const</span> chain <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        resolved<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>xhr<span class=\"token punctuation\">,</span>\n        rejected<span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n    <span class=\"token comment\">//请求拦截器放在请求调用之前</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">interceptor</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      chain<span class=\"token punctuation\">.</span><span class=\"token function\">unshift</span><span class=\"token punctuation\">(</span>interceptor<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">//响应拦截器放在请求调用之后</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">interceptor</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      chain<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>interceptor<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">let</span> promise <span class=\"token operator\">=</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>chain<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> resolved<span class=\"token punctuation\">,</span> rejected <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> chain<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      promise <span class=\"token operator\">=</span> promise<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>resolved<span class=\"token punctuation\">,</span> rejected<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> promise\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> axios <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">//为config的headers属性添加Token字段</span>\naxios<span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">config</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  config<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">.</span>Token <span class=\"token operator\">=</span> <span class=\"token string\">'string'</span>\n  <span class=\"token keyword\">return</span> config\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">//为返回值添加一个msg属性</span>\naxios<span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  response<span class=\"token punctuation\">.</span>msg <span class=\"token operator\">=</span> <span class=\"token string\">'success'</span>\n  <span class=\"token keyword\">return</span> response\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\naxios\n  <span class=\"token punctuation\">.</span><span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    url<span class=\"token operator\">:</span> <span class=\"token string\">'/api'</span><span class=\"token punctuation\">,</span>\n    headers<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// config: { url: '/api', headers: { Token: 'string' } }</span>\n<span class=\"token comment\">// reponse: { code: 200, data: 'test', msg: 'success' }</span>\n</code></pre></div>","frontmatter":{"title":"Axios 中拦截器的实现","date":"June 01, 2020","description":"在 Axios 中拦截器是非常有用的一个功能，可以让我们实现请求前对 config 参数进行调整以及响应后的数据处理"}},"previous":{"fields":{"slug":"/learn-vue/"},"frontmatter":{"title":"vue源码学习--变化侦测"}},"next":{"fields":{"slug":"/http/"},"frontmatter":{"title":"HTTP 协议"}}},"pageContext":{"id":"7504e83f-474d-5aac-95c7-7212bbb758c7","previousPostId":"c307b6a7-c443-5454-a3c9-c052f63e3b17","nextPostId":"d521b323-da89-5f25-b6be-db70e9a28458"}},"staticQueryHashes":["2841359383","3257411868"]}