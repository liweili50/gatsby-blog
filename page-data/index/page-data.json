{"componentChunkName":"component---src-pages-index-js","path":"/","result":{"data":{"site":{"siteMetadata":{"title":"Gatsby Blog"}},"allMarkdownRemark":{"nodes":[{"excerpt":"参加声网的面试遇到一个算法，现场没能完成，略有遗憾，第一次遇到考察这个算法，心态没放好，也有时间方面的限制，私下完成以便记忆。","fields":{"slug":"/json-tostring/"},"frontmatter":{"date":"June 02, 2022","title":"实现一个函数可以转换JSON成字符串","description":"实现一个函数可以转换JSON成字符串，类似JSON.stringify"}},{"excerpt":"发布订阅 创建一个 EventListener 给 EventListener 添加一个缓存列表，用于存放回调函数以便通知订阅者 发布消息时，EventListener 遍历缓存列表，依次触发回调 故 EventListener 应该有 emit (发布) 、on…","fields":{"slug":"/publish-subscribe/"},"frontmatter":{"date":"March 14, 2022","title":"发布订阅","description":"实现一个简易的发布订阅。"}},{"excerpt":"冒泡排序 大致流程：依次比较相邻的两个数,正序则不动,倒序则交换位置,如此循环,直到整个数组为有序为止。 快速排序 快速排序就是个二叉树的前序遍历，快速排序的逻辑是，若要对 nums[lo..hi] 进行排序，我们先找一个分界点 p，通过交换元素使得 nums[lo..p-…","fields":{"slug":"/array-sort/"},"frontmatter":{"date":"March 13, 2022","title":"排序算法","description":"记录两种常见的排序算法。"}},{"excerpt":"reduce() 方法对数组中的每个元素执行一个由您提供的reducer函数(升序执行)，将其结果汇总为单个返回值。 reducer 函数接收4个参数:\nAccumulator (acc) (累计器)\nCurrent Value (cur) (当前值)\nCurrent Index…","fields":{"slug":"/array-reduce/"},"frontmatter":{"date":"February 20, 2022","title":"数组的reduce方法","description":"reduce() 方法对数组中的每个元素执行一个由您提供的reducer函数(升序执行)，将其结果汇总为单个返回值。"}},{"excerpt":"前端代码打包之后的静态资源要部署在服务器上，这时候就要做对这些静态资源做一些运维配置来做性能优化，其中，gzip 和设置 HTTP 缓存是必不可少的。gzip 可以极大的减少数据传输时的体积，合理的缓存机制则会让浏览器减少对资源的请求。 使用 nginx 开启 gzip…","fields":{"slug":"/http-cache/"},"frontmatter":{"date":"December 06, 2021","title":"HTTP相关的性能优化","description":"前端代码打包之后的静态资源要部署在服务器上，这时候就要做对这些静态资源做一些运维配置来做性能优化，其中，gzip 和设置 HTTP 缓存是必不可少的"}},{"excerpt":"算法核心思路 用左右指针维护一个窗口（连续的子数组/子串），根据题目在遍历数组或者字符串的时候动态调整两个指针（一般都是++），遇到可行解就进行记录。 leetcode 算法：求无重复字符的最长子串 给定一个字符串 s…","fields":{"slug":"/sliding-window/"},"frontmatter":{"date":"October 22, 2021","title":"滑动窗口算法","description":"滑动窗口算法可以用以解决数组/字符串的子元素问题，它可以将嵌套的循环问题，转换为单循环问题，降低时间复杂度。"}},{"excerpt":"洗牌算法是我们常见的随机问题，在玩游戏、随机排序时经常会碰到。具体就是使原数组的某个数在打散后的数组中的每个位置上等概率的出现。 算法步骤为： 建立一个数组大小为 n 的数组 arr，分别存放 1 到 n 的数值 生成一个从 0 到 n - 1 的随机数 x 输出 arr…","fields":{"slug":"/shuffle-algorithm/"},"frontmatter":{"date":"October 13, 2021","title":"洗牌算法","description":"洗牌算法是我们常见的随机问题，在玩游戏、随机排序时经常会碰到。具体就是使原数组的某个数在打散后的数组中的每个位置上等概率的出现。"}},{"excerpt":"WSL(适用于 Linux 的 Windows 子系统)可让开发人员直接在 Windows 上按原样运行 GNU/Linux 环境（包括大多数命令行工具、实用工具和应用程序），且不会产生传统虚拟机或双启动设置开销。 WSL 的安装 以管理员身份运行 powershell…","fields":{"slug":"/wsl-setup/"},"frontmatter":{"date":"September 24, 2021","title":"使用LxRunOffline管理WSL","description":""}},{"excerpt":"最近重新鼓捣 Gatsby Blog，认真翻看它了文档，发现用 markdown 本地文件只是其中一种数据来源方式，它还支持 CMS、数据库或者其他第三方数据。用 markdown 编写发布文章是通过处理成本地数据再利用 GraphQL 查询，然后利用 Gatsby…","fields":{"slug":"/github-actions/"},"frontmatter":{"date":"September 10, 2021","title":"Github Actions的使用","description":"最近重新鼓捣 Gatsby Blog，翻看它了文档，发现了它支持多种数据来源。虽然我是采用markdown编写，处理成本地数据再利用GraphQL查询，这就利用了Gatsby提供的hooks，刚好在这里可以让我用来把数据提交到数据库。"}},{"excerpt":"在 Axios 中拦截器是非常有用的一个功能，可以让我们实现请求前对 config 参数进行调整以及响应后的数据处理。\n由于可以添加多个请求或响应拦截器，所以很明显 Axios 的拦截器内部是一个数组，通过 use 方法进行添加拦截器，通过 eject…","fields":{"slug":"/axios-interceptor/"},"frontmatter":{"date":"August 20, 2021","title":"Axios 中拦截器的实现","description":"在 Axios 中拦截器是非常有用的一个功能，可以让我们实现请求前对 config 参数进行调整以及响应后的数据处理"}},{"excerpt":"求解连续数列 已知连续正整数数列{K}=K1,K2,K3…Ki 的各个数相加之和为 S，i=N (0<S<100000, 0<N<100000), 求此数列 K。输入描述:\n输入包含两个参数，1)连续正整数数列和 S，2)数列里数的个数 N。 输出描述: 如果有解输出数列 K…","fields":{"slug":"/continuous-sequence/"},"frontmatter":{"date":"August 12, 2020","title":"求解连续数列","description":"已知连续正整数数列{K}=K1,K2,K3...Ki的各个数相加之和为S"}},{"excerpt":"从对象中借用方法 一个 function 即便是定义在一个对象中，作为对象的一个“方法”，它也只不过是一个普通的函数而已，跟其他函数没有任何区别。在执行时仍然需要为 this 绑定一个具体的对象。 this 并不指 function 对象本身，也不是指 function…","fields":{"slug":"/method-borrowing/"},"frontmatter":{"date":"August 10, 2020","title":"javaScript 方法借用（method borrowing）","description":"在JavaScript中，可以从其他对象借用方法来构建某些功能，而不必继承它们的所有属性和方法。就是我们从一个对象中获取一个方法，并在另一个对象的上下文中“调用”它"}},{"excerpt":"JavaScript 中有八种基本的数据类型（前七种为基本数据类型，也称为原始类型，而 object 为复杂数据类型）。 number 用于任何类型的数字：整数或浮点数，在 ±253 范围内的整数。 bigint 用于任意长度的整数。 string…","fields":{"slug":"/javascript-types/"},"frontmatter":{"date":"June 24, 2020","title":"javaScript 数据类型","description":"JavaScript 中有八种基本的数据类型（译注：前七种为基本数据类型，也称为原始类型，而 object 为复杂数据类型）。"}},{"excerpt":"HTTP 协议简介 1、HTTP 协议是 Hyper Text Transfer Protocol（超文本传输协议）的缩写,是用于从万维网（WWW:World Wide Web ）服务器传输超文本到本地浏览器的传送协议。 2、HTTP 是一个基于 TCP/IP…","fields":{"slug":"/http/"},"frontmatter":{"date":"June 01, 2020","title":"HTTP 协议","description":""}},{"excerpt":"变化侦测 首先，我们定义一个数据对象 car： 接下来，我们使用 Object.defineProperty()改写上面的例子： 通过 Object.defineProperty()方法给 car 定义了一个 price 属性，并把这个属性的读和写分别使用 get()和 set…","fields":{"slug":"/learn-vue/"},"frontmatter":{"date":"April 13, 2020","title":"vue源码学习--变化侦测","description":""}},{"excerpt":"单线程模型 单线程模型指的是，JavaScript 只在一个线程上运行。也就是说，JavaScript 同时只能执行一个任务，其他任务都必须在后面排队等待。 注意，JavaScript 只在一个线程上运行，不代表 JavaScript…","fields":{"slug":"/single-thread/"},"frontmatter":{"date":"December 17, 2018","title":"定时器运行机制","description":""}},{"excerpt":"当你使用 React，在单一时间点你可以考虑 render()函数作为创建 React 元素的树。在下一次状态或属性更新，render()函数将返回一个不同的 React 元素的树。React 需要算出如何高效更新 UI…","fields":{"slug":"/react-diff/"},"frontmatter":{"date":"December 06, 2018","title":"React Diff 算法原理","description":""}},{"excerpt":"两数之和 给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。 你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。 示例:\n给定 nums = [2, 7, 11, 1…","fields":{"slug":"/sum-of-two-number/"},"frontmatter":{"date":"November 28, 2018","title":"两数之和","description":"给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。"}}]}},"pageContext":{}},"staticQueryHashes":["2841359383","3257411868"]}