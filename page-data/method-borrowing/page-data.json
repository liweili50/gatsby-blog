{"componentChunkName":"component---src-templates-blog-post-js","path":"/method-borrowing/","result":{"data":{"site":{"siteMetadata":{"title":"Gatsby Blog"}},"markdownRemark":{"id":"e08abafb-65ab-5efe-8845-29b18830dbe0","excerpt":"从对象中借用方法 一个 function 即便是定义在一个对象中，作为对象的一个“方法”，它也只不过是一个普通的函数而已，跟其他函数没有任何区别。在执行时仍然需要为 this 绑定一个具体的对象。 this 并不指 function 对象本身，也不是指 function…","html":"<h2>从对象中借用方法</h2>\n<p>一个 function 即便是定义在一个对象中，作为对象的一个“方法”，它也只不过是一个普通的函数而已，跟其他函数没有任何区别。在执行时仍然需要为 this 绑定一个具体的对象。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    a<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">foo</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nobj<span class=\"token punctuation\">.</span><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//1</span>\n\n<span class=\"token keyword\">var</span> g <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">;</span>\n<span class=\"token function\">g</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">//undefined</span>\n\nobj<span class=\"token punctuation\">.</span><span class=\"token function\">foo</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//1</span></code></pre></div>\n<p>this 并不指 function 对象本身，也不是指 function 的作用域对象。而是在运行时绑定到特定的对象上。因此直接借用对象里的函数 foo，在非严格模式下没有明确绑定对象，this 会指向全局对象，所以输出 undefined。在严格模式下则会报错。</p>\n<h2>使用 “func.call”和 “func.apply” 设定上下文</h2>\n<p>javaScript 有一个特殊的内置函数方法 func.call(context, …args)，它允许调用一个显式设置 this 的函数。\n语法如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">func</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> arg1<span class=\"token punctuation\">,</span> arg2<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>它运行 func，提供的第一个参数作为 this，后面的作为参数（arguments）</p>\n<p>使用 func.call 的时候如果需要传递多个参数时要搭配扩展运算符</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">func</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>arguments<span class=\"token punctuation\">)</span></code></pre></div>\n<p>我们也可以使用 func.apply(this, arguments)代替，它运行 func 设置 this=context，并使用类数组对象 args 作为参数列表（arguments）。\ncall 和 apply 之间唯一的语法区别是，call 期望一个参数列表，而 apply 期望一个包含这些参数的类数组对象。</p>\n<p>因此，这两个调用几乎是等效的：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">func</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 使用 spread 语法将数组作为列表传递</span>\n<span class=\"token function\">func</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 与使用 call 相同</span></code></pre></div>\n<p>这里只有很小的区别：</p>\n<ul>\n<li>Spread 语法 … 允许将 可迭代对象 args 作为列表传递给 call。</li>\n<li>apply 仅接受 类数组对象 args。\n因此，当我们期望可迭代对象时，使用 call，当我们期望类数组对象时，使用 apply。</li>\n</ul>\n<p>对于即可迭代又是类数组的对象，例如一个真正的数组，我们使用 call 或 apply 均可，但是 apply 可能会更快，因为大多数 JavaScript 引擎在内部对其进行了优化。\n将所有参数连同上下文一起传递给另一个函数被称为“呼叫转移（call forwarding）”。\n这是它的最简形式：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">let wrapper = function() {\n  return func.apply(this, arguments);\n};</code></pre></div>\n<p>当外部代码调用这种包装器 <code class=\"language-text\">wrapper</code> 时，它与原始函数 <code class=\"language-text\">func</code> 的调用是无法区分的。</p>\n<h2>方法借用（method borrowing）</h2>\n<p>在 JavaScript 中，可以从其他对象借用方法来构建某些功能，而不必继承它们的所有属性和方法。从上面的例子我们已经知道不能直接借用对象里的方法，这样会由于 this 的问题而出现意想不到的结果，所以要借助 func.call 或者 func.apply 实现。</p>\n<ol>\n<li>一个最常见的例子就是伪数组的转换</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[].slice.call(arguments)</code></pre></div>\n<p>slice 方法内部的 this 就会被替换成 arguments，并循环遍历 arguments，复制到新数组返回，这样就得到了一个复制 arguments 类数组的数组对象.</p>\n<ol start=\"2\">\n<li>使用 Object.prototype.toString 方法来揭示类型</li>\n</ol>\n<p>除了 <code class=\"language-text\">instanceof</code> 操作符用于检查一个对象是否属于某个特定的 class 之外，还可以借用 Object.prototype.toString 来检查变量的数据类型</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">let obj = {};\n\nalert(obj); // [object Object]</code></pre></div>\n<p>一个普通对象被转化为字符串时为 [object Object],原因在于内建的 toString 方法。该方法可以被从对象中提取出来，并在任何其他值的上下文中执行。其结果取决于该值。</p>\n<ul>\n<li>对于 number 类型，结果是 [object Number]</li>\n<li>对于 boolean 类型，结果是 [object Boolean]</li>\n<li>对于 null：[object Null]</li>\n<li>对于 undefined：[object Undefined]</li>\n<li>对于数组：[object Array]</li>\n<li>……等（可自定义）</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> s <span class=\"token operator\">=</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>toString\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">s</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [object Array]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">s</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [object Number]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">s</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [object Null]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">s</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [object Function]</span></code></pre></div>\n<p>还可以使用特殊的对象属性 Symbol.toStringTag 自定义对象的 toString 方法的行为。</p>\n<p>例如：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>toStringTag<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token string\">\"User\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [object User]</span></code></pre></div>\n<h2>func.bind()</h2>\n<p>call apply bind 都有着改变 this 指向的功能，但与 call 和 apply 不同，bind 返回的是一个新的函数，你必须调用它才会被执行。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> Animal <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">\"动物\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">大家好，我是</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> Cat <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">\"大狸猫\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\nAnimal<span class=\"token punctuation\">.</span><span class=\"token function\">say</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>Cat<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 大家好，我是大狸猫</span>\n\nAnimal<span class=\"token punctuation\">.</span><span class=\"token function\">say</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>Cat<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 大家好，我是大狸猫</span>\n\nAnimal<span class=\"token punctuation\">.</span><span class=\"token function\">say</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>Cat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 大家好，我是大狸猫</span></code></pre></div>\n<p>方法 <code class=\"language-text\">func.bind(context, ...args)</code> 返回函数 func 的“绑定的（bound）变体”，它绑定了上下文 this 和第一个参数（如果给定了）。\n同样有个很常见的例子是简写<code class=\"language-text\">console.log()</code></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> log <span class=\"token operator\">=</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">)</span>\n<span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"123\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 123</span></code></pre></div>","frontmatter":{"title":"javaScript 方法借用（method borrowing）","date":"August 10, 2020","description":"在JavaScript中，可以从其他对象借用方法来构建某些功能，而不必继承它们的所有属性和方法。就是我们从一个对象中获取一个方法，并在另一个对象的上下文中“调用”它"}},"previous":{"fields":{"slug":"/javascript-types/"},"frontmatter":{"title":"javaScript 数据类型"}},"next":{"fields":{"slug":"/continuous-sequence/"},"frontmatter":{"title":"求解连续数列"}}},"pageContext":{"id":"e08abafb-65ab-5efe-8845-29b18830dbe0","previousPostId":"c041156b-d7c2-5904-92a8-aef45fcf83eb","nextPostId":"df11174d-95aa-523a-b2a7-cea52a8af989"}},"staticQueryHashes":["2841359383","3257411868"]}